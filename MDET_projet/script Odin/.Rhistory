#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.4
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.2
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.3
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.35
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.35
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.3
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.25
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.25
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens**0.5))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.25
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens**0.8))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.25
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens**2))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.25
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens))+
scale_fill_gradient2(low = "white" ,
high = "red") +
main_theme
######## Implementation de mutation ##########
#parametres
p = 0.1 #taux de la pop qui mute
T = 10000
t = 200
n = rep(0,i)
n[i/6] <- 1 # densites de pop initiale (une seule espece)
N0 <- t(as.matrix(n))
sigma = 0.25
#Initialisation des valeures de K
k = c()
for (i in 1:length(x)){
k = c(c(k),c(K_cap(x[i])))
}
K = matrix(rep(k,i), ncol = i, nrow = i, byrow = FALSE)
A = exp(-0.5*D^2/(sigma^2))
M = A/t(K)
ode <-ode(N0,1:t,model,parms = sigma)
ode_mutation <- ode
#trouver un moyen de faire muter tout le monde... (peut etre metre un seuil de densité min..)
for (z in 2:(T/t)){
N0 <- t(as.matrix(tail(ode,1)[,1:i+1]))
a = runif(1)
index = which.max(N0)
if (a<0.5){ #mutation vers la gauche
N0[max(0,index-1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
} else { #mutation vers la droite
N0[min(i,index+1)] <- p*N0[index]
N0[index] <- (1-p)*N0[index]
}
ode <-ode(N0,(z*t):(z*t+t),model,parms = sigma)
ode_mutation <- rbind(ode_mutation,ode)
}
ode_mutation_plot = as.data.frame(ode_mutation)%>%
pivot_longer(-time, values_to = "dens", names_to = "sp_ID")
ode_mutation_plot$sp_ID <- as.numeric(ode_mutation_plot$sp_ID)
ode_mutation_plot$trait <- x[as.numeric(ode_mutation_plot$sp_ID)]
ggplot(ode_mutation_plot)+
geom_raster(aes(trait, time,  fill=dens^**2))+
